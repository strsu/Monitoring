# receivers: 데이터 수신 방법 정의
receivers:
  # OTLP (OpenTelemetry Protocol) 리시버: OpenTelemetry SDK를 통해 전송되는 데이터를 수신합니다.
  # Django 애플리케이션에서 OTLP exporter를 사용하여 Collector로 데이터를 보낼 때 사용됩니다.
  otlp:
    protocols:
      grpc: # gRPC 프로토콜 (일반적으로 4317 포트)
      http: # HTTP/JSON 프로토콜 (일반적으로 4318 포트)

  # Prometheus 리시버: Prometheus Exporter 형식으로 노출되는 메트릭을 스크랩합니다.
  # 예를 들어, `django-prometheus`가 노출하는 메트릭을 스크랩할 수 있습니다.
  # 이 예시에서는 Collector 자체가 Prometheus metrics를 노출한다고 가정합니다.
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 5s
          static_configs:
            - targets: ['localhost:8888'] # OTel Collector가 자체적으로 메트릭을 노출하는 포트

  # Filelog 리시버: 파일 시스템에서 로그를 읽어옵니다. (선택 사항, Promtail/Fluentd 대신 사용 가능)
  # Loki로 로그를 전송하는 경우 유용할 수 있습니다.
  # filelog:
  #   include: [ "/var/log/my_django_app/*.log" ]
  #   start_at: beginning
  #   operators:
  #     - type: json_parser
  #       timestamp:
  #         parse_from: attributes.time
  #         layout: '%Y-%m-%dT%H:%M:%S.%LZ' # 예시: "2023-10-27T10:00:00.123Z"
  #       severity:
  #         parse_from: attributes.level
  #       body:
  #         parse_from: attributes.message

# processors: 수신된 데이터를 처리하고 변형하는 방법 정의
processors:
  # batch 프로세서: 데이터를 배치(batch)로 모아서 전송하여 네트워크 오버헤드를 줄입니다.
  batch:
    send_batch_size: 1000
    timeout: 10s

  # resource 프로세서: 리소스 속성(service.name, host.name 등)을 추가하거나 수정합니다.
  resource:
    attributes:
      - key: host.arch
        value: "amd64"
        action: insert
      - key: django.version
        value: "4.2" # Django 버전 정보 추가 (예시)
        action: insert

  # memory_limiter 프로세서: Collector의 메모리 사용량을 제한하여 OOM(Out Of Memory)을 방지합니다.
  memory_limiter:
    check_interval: 1s
    limit_mib: 256 # Collector가 사용할 수 있는 최대 메모리 (MiB)
    spike_limit_mib: 64

  # attributes 프로세서: 스팬, 메트릭, 로그의 속성(attributes)을 추가, 제거, 변경합니다.
  attributes:
    actions:
      - key: client.address # 클라이언트 IP 주소 제거 (선택 사항: 개인 정보 보호)
        action: delete
      - key: custom.tag
        value: "my_custom_value"
        action: insert

# exporters: 처리된 데이터를 특정 백엔드로 내보내는 방법 정의
exporters:
  # OTLP 익스포터 (Tempo용): 트레이스를 Grafana Tempo로 전송합니다.
  otlp:
    endpoint: "tempo:4317" # Docker Compose 환경에서 Tempo 서비스 이름 (gRPC 포트)
    tls:
      insecure: true # 개발 환경에서 SSL 인증서 검증 무시

  # Prometheus 익스포터: 메트릭을 Prometheus가 스크랩할 수 있도록 노출합니다.
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "otel"
    const_labels:
      label1: value1
    send_timestamps: true
    metric_expiration: 180m
    enable_open_metrics: true
    add_metric_suffixes: false

  # Loki 익스포터: 로그를 Grafana Loki로 전송합니다.
  # Loki는 OTLP를 직접 수신할 수 있지만, otel-collector를 통해 전송하는 것도 일반적입니다.
  loki:
    endpoint: "http://loki:3100/loki/api/v1/push" # Docker Compose 환경에서 Loki 서비스 주소

# service: 파이프라인 구성 및 기타 서비스 설정
service:
  telemetry:
    logs:
      level: "debug" # Collector 로그 레벨 (info, debug, warn, error)
  pipelines:
    # traces 파이프라인: OTLP 리시버 -> 배치 프로세서 -> Tempo 익스포터
    traces:
      receivers: [otlp]
      processors: [batch, memory_limiter, resource]
      exporters: [otlp] # Tempo로 트레이스 전송

    # metrics 파이프라인: OTLP 리시버 -> 배치 프로세서 -> Prometheus 익스포터
    # 또는 Prometheus 리시버 -> 배치 프로세서 -> Prometheus 익스포터
    metrics:
      receivers: [otlp, prometheus] # 앱에서 OTLP로 보내거나, Collector가 Prometheus Exporter를 스크랩
      processors: [batch, memory_limiter, resource]
      exporters: [prometheus] # Prometheus가 스크랩할 수 있도록 메트릭 노출

    # logs 파이프라인: OTLP 리시버 -> 배치 프로세서 -> Loki 익스포터
    # Django 앱에서 OTLP 로그를 보내거나, filelog 리시버를 통해 로그 파일을 읽을 수 있습니다.
    logs:
      receivers: [otlp] # 만약 filelog를 사용한다면 [otlp, filelog]
      processors: [batch, memory_limiter, resource, attributes] # attributes 프로세서 추가
      exporters: [loki] # Loki로 로그 전송